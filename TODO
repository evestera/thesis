Proof that we can derive traits that apply to base types. Use Default as example.

Shape inference
- Basic details
- Explain any changes from F# Data

Mention other type-provider-like things in Rust
diesel
serde
println

Code generation
syn/quote?
rustfmt?

Explain how serde and our generated code is not specific to JSON, and our defined types can be used to translate between JSON and other formats.

Write about Rust Language Server and LSP?

Extend to tagged any types
How to use these to create Enums

Tuple detection ("Rust has a way to represent ['foo', 3]: (string, i64)")
Arrays are sometimes used as tuples
Maybe introduce concept of trivially common shapes: (Shape, Shape) -> Option<Shape>
Prefer (int, string) to [any]
struct Tuple {
    /// Count the number of samples this data is based on
    /// Don't assume something is a tuple with just one sample
    seen: i64,
    /// Length is an implicit field based on shapes Vec
    shapes: Vec<Shape>,
}

Track seen values of numbers (for boolean detection)
Track seen values of strings (for enum detection)

Any way to detect objects used as maps?

Inference hints using JSON pointers?
"/foo/bar/*" "HashMap<String, _>"
"/foo/bar/*" "map"
"/*/type" "enum" (or "tag")
"/foo/bar" "(int, string)"
"/foo/bar" "tuple"

Wildcard adds some complexities. Bare JSON pointer has some nice properties that are destroyed:
- String equality => pointer equality
- Value::pointer can only have one result

{
  "top_left": { "x": 4, "y": 5 },
  "bottom_right": { "x": 2, "y": 9 }
}
"/top_left" type_name Point
"/top_left" same_as "/bottom_right"

Default providers using JSON pointers?

Reuse identical types
Collapse identical shapes? Algorithm?
  {
    "buyer": { ... },
    "seller": { ... }
  }
Hints: "/buyer" same_as "/seller"


Inferring types from multiple samples/sample-sets but ensuring that they can still work together.
Frunk, Generic, LabelledGeneric
  #[derive(LabelledGeneric)]
Inferring at the same time:
  multi_typegen!(A, "sampleA", B "sampleB")
  Depends on ability to reuse identical types
Inference hints:
  typegen!(A, "sampleA", {
    hints: {
      "/*/owner", type_name, Person
    }
  });
  typegen!(B, "sampleB", {
    hints = {
      "/buyer", use_type, Person
    }
  });

Diagrams from shapes?
Shapes to schemas?

json_typegen Atom package
expand macro invocation with code using binary (or maybe web API)
notify on changes (though a git diff would do the same thing)

use CARGO_MANIFEST_DIR to find local files

Mention that is possible to see documentation for generated code.
Generate additional documentation for generated types. Configurable what kind of information.

Enable logging of inference information.

Look at possibility of generating types for no-std projects
(serde supports no-std, but seems like serde_json does not...)

Wrapper types w/Deref<Target=Vec<Value>> for heterogenous lists
Maybe custom enum types
i.e. mixed.numbers() returns Iter<f64>, mixed.strings() returns Iter<

"/A" same_as "/B" can be applied between inference and generation
retrieve shape for A, shape for B, unify, put result back. shape should have some kind of typeId if identical shapes are not already detected

"/A" type_name "Foo"
"/B" type_name "Foo"
should be equivalent to
"/A" same_as "/B"
"/B" type_name "Foo"

detecting identical shapes:
only need to check types at same nesting level. i.e. object containing object (nest 1) can't have same shape as object not containing object (nest 0)
since JSON is purely hierarchical every object will have well defined nesting level
